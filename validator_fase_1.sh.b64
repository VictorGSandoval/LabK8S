#!/bin/bash

# Variables dinámicas basadas en el correo del estudiante
USUARIO=$1
FASE=$2
NAMESPACE="fase-$FASE"
DEPLOYMENT="$USUARIO-deployment"
SERVICE="$USUARIO-service"
CONFIGMAP="$USUARIO-configmap"
POD_PRUEBA="prueba-$USUARIO-pod"
CLAVE_CONFIGMAP="app-config"
VALOR_ESPERADO="activo"
PUERTO_ESPERADO=8080

# URL del API Gateway
API_GATEWAY="https://ew23pa76o1.execute-api.us-east-1.amazonaws.com/prod/report"
EMAIL="$USUARIO@vallegrande.edu.pe"

# Validar namespace
validar_namespace() {
    echo "Validando namespace '$NAMESPACE'..."
    if ! kubectl get namespace "$NAMESPACE" > /dev/null 2>&1; then
        echo "Error: Namespace '$NAMESPACE' no existe."
        exit 1
    fi
}

# Validar deployment
validar_deployment() {
    echo "Validando deployment '$DEPLOYMENT'..."
    DEPLOY=$(kubectl get deployment "$DEPLOYMENT" -n "$NAMESPACE" -o json 2>/dev/null)
    if [[ -z "$DEPLOY" ]]; then
        echo "Error: Deployment '$DEPLOYMENT' no existe."
        exit 1
    fi

    # Validar que haya al menos 2 réplicas
    REPLICAS=$(echo "$DEPLOY" | jq '.spec.replicas')
    if [[ "$REPLICAS" -lt 2 ]]; then
        echo "Error: Deployment '$DEPLOYMENT' debe tener al menos 2 réplicas."
        exit 1
    fi

    # Validar que el puerto del contenedor sea el esperado
    PUERTO=$(echo "$DEPLOY" | jq -r '.spec.template.spec.containers[0].ports[0].containerPort')
    if [[ "$PUERTO" -ne "$PUERTO_ESPERADO" ]]; then
        echo "Error: El contenedor del deployment debe exponer el puerto $PUERTO_ESPERADO."
        exit 1
    fi

    # Validar que el ConfigMap esté configurado como variable de entorno
    ENV_FROM_CONFIGMAP=$(echo "$DEPLOY" | jq -r ".spec.template.spec.containers[0].envFrom[0].configMapRef.name")
    if [[ "$ENV_FROM_CONFIGMAP" != "$CONFIGMAP" ]]; then
        echo "Error: El Deployment no está configurado para usar el ConfigMap '$CONFIGMAP'."
        exit 1
    fi

    echo "Validación del deployment completada con éxito."
}

# Validar service
validar_service() {
    echo "Validando service '$SERVICE'..."
    SVC=$(kubectl get service "$SERVICE" -n "$NAMESPACE" -o json 2>/dev/null)
    if [[ -z "$SVC" ]]; then
        echo "Error: Service '$SERVICE' no existe."
        exit 1
    fi

    # Validar que el Service apunte al Deployment correcto
    SELECTOR=$(echo "$SVC" | jq -r '.spec.selector."app"')
    if [[ "$SELECTOR" != "$DEPLOYMENT" ]]; then
        echo "Error: El Service debe apuntar al Deployment '$DEPLOYMENT'."
        exit 1
    fi
}

# Validar configmap
validar_configmap() {
    echo "Validando configmap '$CONFIGMAP'..."
    CONFIG=$(kubectl get configmap "$CONFIGMAP" -n "$NAMESPACE" -o json 2>/dev/null)
    if [[ -z "$CONFIG" ]]; then
        echo "Error: ConfigMap '$CONFIGMAP' no existe."
        exit 1
    fi

    # Validar clave y valor
    VALOR=$(echo "$CONFIG" | jq -r ".data.\"$CLAVE_CONFIGMAP\"")
    if [[ "$VALOR" != "$VALOR_ESPERADO" ]]; then
        echo "Error: ConfigMap '$CONFIGMAP' debe contener la clave '$CLAVE_CONFIGMAP' con el valor '$VALOR_ESPERADO'."
        exit 1
    fi
}

# Probar conectividad con el service
probar_conectividad_service() {
    echo "Probando conectividad con el Service '$SERVICE'..."
    kubectl run "$POD_PRUEBA" \
        --image=busybox \
        --restart=Never \
        --namespace="$NAMESPACE" \
        --command -- sh -c "wget -qO- http://$SERVICE:$PUERTO_ESPERADO" > /dev/null 2>&1

    # Validar si el Pod pudo conectarse al Service
    if [[ $? -ne 0 ]]; then
        echo "Error: No se puede conectar al Service '$SERVICE' en el puerto $PUERTO_ESPERADO."
        exit 1
    fi

    # Eliminar el Pod temporal
    kubectl delete pod "$POD_PRUEBA" -n "$NAMESPACE" > /dev/null 2>&1
    echo "Conectividad con el Service '$SERVICE' validada con éxito."
}


# Validar logs de los Pods
validar_logs_pod() {
    echo "Validando logs de los Pods del deployment '$DEPLOYMENT'..."

    # Seleccionar Pods con la etiqueta correcta
    POD_NAME=$(kubectl get pods -n "$NAMESPACE" -l app="$USUARIO-deployment" -o jsonpath="{.items[0].metadata.name}" 2>/dev/null)

    if [[ -z "$POD_NAME" ]]; then
        echo "Error: No se encontraron Pods asociados al Deployment '$DEPLOYMENT'."
        exit 1
    fi

    LOGS=$(kubectl logs "$POD_NAME" -n "$NAMESPACE" 2>/dev/null)

    if [[ -z "$LOGS" ]]; then
        echo "Error: No se pudieron obtener logs del Pod '$POD_NAME'."
        exit 1
    fi

    # Cambiar el mensaje esperado según los logs reales
    if [[ "$LOGS" != *"ready for start up"* ]]; then
        echo "Error: Los logs del Pod no contienen el mensaje esperado."
        exit 1
    fi

    echo "Validación de logs completada con éxito."
}



# Enviar resultados al API Gateway
enviar_resultados() {
    echo "Enviando resultados al servidor..."
    TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    PAYLOAD=$(cat <<EOF
{
    "email": "$EMAIL",
    "name": "$USUARIO",
    "phase": "$FASE",
    "status": "completed",
    "timestamp": "$TIMESTAMP"
}
EOF
)
    RESPUESTA=$(curl -s -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$API_GATEWAY")
    echo "Respuesta del servidor: $RESPUESTA"
}

# Ejecución de validaciones
validar_namespace
validar_deployment
validar_service
validar_configmap
probar_conectividad_service
validar_logs_pod

# Enviar resultados
enviar_resultados

echo "Todas las validaciones completadas con éxito para la fase $FASE."
