#!/bin/bash

# Variables dinámicas basadas en el correo del estudiante
USUARIO=$1
FASE=$2

NAMESPACE="$USUARIO-namespace"
DEPLOY_BACKEND="backend-$USUARIO-deployment"
DEPLOY_FRONTEND="frontend-$USUARIO-deployment"
CONFIGMAP="$USUARIO-configmap"
# Asumiendo que los nombres de los servicios y deployments siguen una convención basada en el usuario
BACKEND_SERVICE_NAME="backend-$USUARIO-service"
FRONTEND_SERVICE_NAME="frontend-$USUARIO-service"
HPA_BACKEND_NAME="backend-$USUARIO-hpa"
API_GATEWAY="https://ew23pa76o1.execute-api.us-east-1.amazonaws.com/prod/report"
EMAIL="$USUARIO@vallegrande.edu.pe"
PUERTO_BACKEND=$PUERTO_BACKEND
PUERTO_FRONTEND=$PUERTO_FRONTEND
# Configuración de claves y valores esperados en el ConfigMap
# declare -A CONFIGMAP_EXPECTED_VALUES=(
#     ["app-config"]="activo"
#     ["db-host"]="db.example.com"
#     ["db-port"]="5432"
#     ["api-key"]="12345-ABCDE"
#     ["feature-x-enabled"]="true"
# )


CONFIGMAP_KEYS=("app-config" "db-host" "db-port" "api-key" "feature-x-enabled")
CONFIGMAP_VALUES=("activo" "db.example.com" "5432" "12345-ABCDE" "true")

validar_namespace() {
    if ! kubectl get namespace "$NAMESPACE" > /dev/null 2>&1; then
        echo "🔴 [ERROR]: Namespace '$NAMESPACE' no existe."
        exit 1
    fi
    echo "🟢 [INFO]: Done $NAMESPACE creado correctamente "
    
}

# Función unificada para validar Backend y Frontend
validar_deployment() {
    local DEPLOYMENT_NAME=$1
    local DEPLOYMENT_TYPE=$2
    VALIDADO=true  # Asumimos que es válido al principio

    # Asignar el puerto esperado según el tipo de deployment
    if [[ "$DEPLOYMENT_TYPE" == "Backend" ]]; then
        PUERTO_ESPERADO=$PUERTO_BACKEND  # Puerto esperado para el backend
    elif [[ "$DEPLOYMENT_TYPE" == "Frontend" ]]; then
        PUERTO_ESPERADO=$PUERTO_FRONTEND  # Puerto esperado para el frontend
    fi
    
    # Validación del deployment (backend o frontend)
    DEPLOY_JSON=$(kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" -o json 2>/dev/null)
    if [[ -z "$DEPLOY_JSON" ]]; then
        echo "🔴 [ERROR]: $DEPLOYMENT_TYPE deployment '$DEPLOYMENT_NAME' no existe."
        VALIDADO=false
    else
        REPLICAS=$(echo "$DEPLOY_JSON" | jq '.spec.replicas')
        CPU=$(echo "$DEPLOY_JSON" | jq -r '.spec.template.spec.containers[0].resources.limits.cpu')
        MEMORY=$(echo "$DEPLOY_JSON" | jq -r '.spec.template.spec.containers[0].resources.limits.memory')
        LABEL=$(echo "$DEPLOY_JSON" | jq -r '.spec.template.metadata.labels.app')
        MATCHLABEL=$(echo "$DEPLOY_JSON" | jq -r '.spec.selector.matchLabels.app')
        CONFIGMAP_NAME=$(echo "$DEPLOY_JSON" | jq -r '.spec.template.spec.containers[0].envFrom[0].configMapRef.name')
        PUERTO_ACTUAL=$(echo "$DEPLOY_JSON" | jq -r '.spec.template.spec.containers[0].ports[0].containerPort')

        if [[ "$CONFIGMAP_NAME" != "$CONFIGMAP" ]]; then
            echo "🔴 [ERROR]: El ConfigMap '$CONFIGMAP' no está asociado con el deployment '$DEPLOYMENT_NAME'."
            VALIDADO=false
        fi

        # Validación del puerto
        if [[ "$PUERTO_ACTUAL" != "$PUERTO_ESPERADO" ]]; then
            echo "🔴 [ERROR]: El puerto configurado ('$PUERTO_ACTUAL') no coincide con el puerto esperado ('$PUERTO_ESPERADO') para '$DEPLOYMENT_NAME'."
            VALIDADO=false
        fi

        # Validaciones específicas del deployment
        if [[ -z "$REPLICAS" || "$REPLICAS" -lt 2 ]]; then
            echo "🔴 [ERROR]: El número de réplicas para '$DEPLOYMENT_NAME' debe ser al menos 2."
            VALIDADO=false
        fi

        if [[ -z "$CPU" ]]; then
            echo "🔴 [ERROR]: No se ha configurado un límite de CPU para '$DEPLOYMENT_NAME'."
            VALIDADO=false
        fi

        if [[ -z "$MEMORY" ]]; then
            echo "🔴 [ERROR]: No se ha configurado un límite de memoria para '$DEPLOYMENT_NAME'."
            VALIDADO=false
        fi

        if [[ "$LABEL" != "$DEPLOYMENT_NAME" ]]; then
            echo "🔴 [ERROR]: El valor del label 'app' para '$DEPLOYMENT_NAME' no es igual al nombre del deployment."
            VALIDADO=false
        fi

        if [[ "$MATCHLABEL" != "$DEPLOYMENT_NAME" ]]; then
            echo "🔴 [ERROR]: El valor de 'matchLabels.app' para '$DEPLOYMENT_NAME' no es igual al nombre del deployment."
            VALIDADO=false
        fi
    fi

    if [[ "$VALIDADO" == true ]]; then
        echo "🟢 [INFO]: Done $DEPLOYMENT_NAME creado correctamente "
    else
        echo " "
    fi
    # Validación del ConfigMap
    CONFIGMAP_JSON=$(kubectl get configmap "$CONFIGMAP" -n "$NAMESPACE" -o json 2>/dev/null)

    if [[ -z "$CONFIGMAP_JSON" ]]; then
        echo "🔴 [ERROR]: El ConfigMap '$CONFIGMAP' no existe en el namespace '$NAMESPACE'."
        VALIDADO=false
    else
        # Validamos que los valores del ConfigMap coinciden con los valores esperados
               for i in "${!CONFIGMAP_KEYS[@]}"; do
            EXPECTED_KEY="${CONFIGMAP_KEYS[$i]}"
            EXPECTED_VALUE="${CONFIGMAP_VALUES[$i]}"
            ACTUAL_VALUE=$(echo "$CONFIGMAP_JSON" | jq -r ".data.\"$EXPECTED_KEY\"")
            
            if [[ "$ACTUAL_VALUE" != "$EXPECTED_VALUE" ]]; then
                echo "🔴 [ERROR]: El valor de '$EXPECTED_KEY' en el ConfigMap '$CONFIGMAP' no coincide. Esperado: '$EXPECTED_VALUE', Encontrado: '$ACTUAL_VALUE'."
                VALIDADO=false
            fi
        done
        if [[ "$VALIDADO" == true ]]; then
            echo "🟢 [INFO]: Done $CONFIGMAP creado correctamente "
        else
            echo " "
        fi
    fi

    if [[ "$VALIDADO" == true ]]; then
       return 0
    else
       return 1
fi
}

validar_servicio_en_pod() {
    local servicio=$1
    local puerto=$2
    local tipo_servicio=$3
    local nombre_pod=$(kubectl get pods -l app=$servicio -n "$NAMESPACE" -o jsonpath="{.items[0].metadata.name}")

    if [ -z "$nombre_pod" ]; then
        echo "🔴 [ERROR]: No se encontró ningún pod para $tipo_servicio."
        return 1
    fi

    # Intentar ejecutar curl dentro del pod para verificar el estado del servicio
    if kubectl exec $nombre_pod -n "$NAMESPACE" -- sh -c 'command -v curl' > /dev/null 2>&1; then
        # curl está disponible, usarlo para obtener el código HTTP
        local respuesta_http=$(kubectl exec $nombre_pod -n "$NAMESPACE" -- curl -s -o /dev/null -w "%{http_code}" http://localhost:$puerto)
    else
        # curl no está disponible, intentar con wget si está disponible
        if kubectl exec $nombre_pod -n "$NAMESPACE" -- sh -c 'command -v wget' > /dev/null 2>&1; then
            local respuesta_http=$(kubectl exec $nombre_pod -n "$NAMESPACE" -- wget -S --spider http://localhost:$puerto 2>&1 | grep 'HTTP/' | awk '{print $2}')
        else
            echo "🔴 [ERROR]: Herramientas para verificar el servicio no están disponibles en el pod $nombre_pod."
            return 1
        fi
    fi

    # Considerar códigos de estado adicionales como válidos
    case $respuesta_http in
        200|401|403|404|400|405)
            echo "🟢 [INFO]: $tipo_servicio ($servicio) en el pod $nombre_pod está activo y respondiendo en el puerto $puerto. Código HTTP: $respuesta_http."
            return 0
            ;;
        *)
            echo "🔴 [ERROR]: $tipo_servicio ($servicio) en el pod $nombre_pod no está respondiendo correctamente. Código HTTP: $respuesta_http."
            return 1
            ;;
    esac
}


validar_servicio_nodeport() {
    local deployment_name=$1
    local service_name=$2
    local tipo_servicio=$3
    local puerto_esperado=$4  # Este es el puerto en el que la aplicación está escuchando internamente
    #echo "Validando configuración de NodePort para el servicio $tipo_servicio..."

    # Obtener información del servicio
    local svc_json=$(kubectl get svc $service_name -n "$NAMESPACE" -o json)
    if [ -z "$svc_json" ]; then
        echo "🔴 [ERROR]: El servicio $service_name para $tipo_servicio no existe."
        return 1
    fi

    # Verificar tipo de servicio y puerto
    local svc_type=$(echo $svc_json | jq -r '.spec.type')
    local node_port=$(echo $svc_json | jq -r '.spec.ports[] | select(.port == 80) | .nodePort')
    local target_port=$(echo $svc_json | jq -r '.spec.ports[] | select(.port == 80) | .targetPort')
    
    if [ "$svc_type" != "NodePort" ]; then
        echo "🔴 [ERROR]: El servicio $service_name para $tipo_servicio no es del tipo NodePort."
        return 1
    elif [ -z "$node_port" ]; then
        echo "🔴 [ERROR]: El servicio $service_name para $tipo_servicio no está configurado en el puerto 80."
        return 1
    elif [ "$target_port" != "$puerto_esperado" ]; then
        echo "🔴 [ERROR]: El targetPort configurado para el servicio $service_name es $target_port, pero se esperaba $puerto_esperado."
        return 1
    fi

    # Verificar la asociación del servicio con el deployment
    local svc_selector=$(echo $svc_json | jq -r '.spec.selector | to_entries | map("\(.key)=\(.value)") | join(",")')
    local deployment_selector=$(kubectl get deployment $deployment_name -n "$NAMESPACE" -o json | jq -r '.spec.selector.matchLabels | to_entries | map("\(.key)=\(.value)") | join(",")')
    if [ "$svc_selector" != "$deployment_selector" ]; then
        echo "🔴 [ERROR]: El selector del servicio $service_name no coincide con el selector del deployment $deployment_name."
        return 1
    fi

    echo "🟢 [INFO]: El servicio $service_name de tipo NodePort para $tipo_servicio está correctamente configurado y asociado al deployment $deployment_name con el targetPort adecuado."
    return 0
}


validar_conexion_servicios() {
    # Crear el pod de pruebas con curl
    kubectl run connectivity-test --image=curlimages/curl --restart=Never -n $NAMESPACE --command -- /bin/sh -c "sleep 3600"

    #echo "Creando pod de pruebas para validar la conectividad..."

    # Esperar a que el pod esté listo
    kubectl wait --for=condition=ready pod connectivity-test -n $NAMESPACE --timeout=20s

    # Probar la conexión al servicio de backend
    #echo "Probando la conexión al servicio de backend..."
    #kubectl exec connectivity-test -n $NAMESPACE -- curl -s -o /dev/null -w "%{http_code}" http://${BACKEND_SERVICE_NAME}:8080

    local backend_response=$(kubectl exec connectivity-test -n $NAMESPACE -- curl -s -o /dev/null -w "%{http_code}" http://${BACKEND_SERVICE_NAME})

    # Probar la conexión al servicio de frontend
    #echo "Probando la conexión al servicio de frontend..."
    local frontend_response=$(kubectl exec connectivity-test -n $NAMESPACE -- curl -s -o /dev/null -w "%{http_code}" http://${FRONTEND_SERVICE_NAME})

    # Lista de códigos HTTP válidos que indican que el puerto está siendo escuchado
    local valid_responses="200 400 401 403 404"

    # Verificar respuestas
    if [[ -n "$backend_response" && -n "$frontend_response" && $valid_responses =~ $backend_response && $valid_responses =~ $frontend_response ]]; then
        echo "🟢 [INFO]: Conexión exitosa a ambos servicios. Backend HTTP: $backend_response, Frontend HTTP: $frontend_response."
        ETAPA_5=True
    else
        echo "🔴 [ERROR]: Problema en la conexión. Backend HTTP: $backend_response, Frontend HTTP: $frontend_response."
        ETAPA_5=False
    fi


    # Limpiar el pod de pruebas para evitar recursos no utilizados
    kubectl delete pod connectivity-test -n $NAMESPACE
}

validar_hpa_backend() {
    local hpa_name=$HPA_BACKEND_NAME
    local expected_deployment=$DEPLOY_BACKEND
    echo "Validando la configuración del HPA para el backend..."

    # Verificar si el HPA existe
    if ! kubectl get hpa $hpa_name -n $NAMESPACE > /dev/null 2>&1; then
        echo "🔴 [ERROR]: El HPA $hpa_name no existe en el namespace $NAMESPACE."
        ETAPA_6=False
        return 1
    fi

    # Obtener los valores de minReplicas y maxReplicas
    local min_replicas=$(kubectl get hpa $hpa_name -n $NAMESPACE -o jsonpath="{.spec.minReplicas}")
    local max_replicas=$(kubectl get hpa $hpa_name -n $NAMESPACE -o jsonpath="{.spec.maxReplicas}")

    # Validar los valores de minReplicas y maxReplicas
    if [[ "$min_replicas" != "2" || "$max_replicas" != "4" ]]; then
        echo "🔴 [ERROR]: El HPA $hpa_name tiene una configuración incorrecta. minReplicas=$min_replicas, maxReplicas=$max_replicas."
        ETAPA_6=False
        return 1
    fi

    # Verificar que el HPA está apuntando al despliegue correcto
    local target_deployment=$(kubectl get hpa $hpa_name -n $NAMESPACE -o jsonpath="{.spec.scaleTargetRef.name}")
    if [[ "$target_deployment" != "$expected_deployment" ]]; then
        echo "🔴 [ERROR]: El HPA $hpa_name no está asociado al despliegue esperado. Apunta a $target_deployment, se esperaba $expected_deployment."
        ETAPA_6=False
        return 1
    fi

    echo "🟢 [INFO]: El HPA $hpa_name está configurado correctamente y asociado al despliegue $expected_deployment con minReplicas=$min_replicas y maxReplicas=$max_replicas."
    ETAPA_6=True
}

# Enviar resultados al servidor
enviar_resultados() {
    TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    
    # Descripción basada en la validación de la etapa 1 (backend y frontend)
    if [[ "$BACKEND_VALIDADO" == 0 || "$FRONTEND_VALIDADO" == 0 ]]; then
        ETAPA_1=True
    else
        ETAPA_1=False
    fi

    # Descripción basada en la validación de la etapa 2 (backend)
    if [[ "$BACKEND_POD_VALIDADO" == 0 ]]; then
        ETAPA_2=True
    else
        ETAPA_2=False
    fi

    # Descripción basada en la validación de la etapa 3 (FRONT)
    if [[ "$FRONTEND_POD_VALIDADO" == 0 ]]; then
        ETAPA_3=True
    else
        ETAPA_3=False
    fi

 # Descripción basada en la validación de la etapa 3 
    if [[ "$BACKEND_SVC_VALIDADO" == 0 || "$FRONTEND_SVC_VALIDADO" == 0 ]]; then
        ETAPA_4=True
    else
        ETAPA_4=False
    fi

    DESCRIPTION="1=$ETAPA_1,2=$ETAPA_2,3=$ETAPA_3,4=$ETAPA_4,5=$ETAPA_5,6=$ETAPA_6"
    
    if [[ "$DESCRIPTION" == *"True"* ]]; then
        PAYLOAD=$(cat <<EOF
{
    "email": "$EMAIL",
    "name": "$USUARIO",
    "phase": "$FASE",
    "status": "completed",
    "timestamp": "$TIMESTAMP",
    "description": "$DESCRIPTION"
}
EOF
)
        RESPUESTA=$(curl -s -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$API_GATEWAY")
        echo "ETAPAS COMPLETADAS(True): $DESCRIPTION"
        echo "Respuesta del servidor: $RESPUESTA"
    else
        echo "No se enviarán resultados, ya que ninguna validación es exitosa."
    fi
}


# Llamada a las funciones de validación y captura del valor de retorno
validar_namespace
validar_deployment "$DEPLOY_BACKEND" "Backend"
BACKEND_VALIDADO=$?

validar_deployment "$DEPLOY_FRONTEND" "Frontend"
FRONTEND_VALIDADO=$?

# Validar la disponibilidad de los servicios en los pods
validar_servicio_en_pod "$DEPLOY_BACKEND" $PUERTO_BACKEND "Backend"
BACKEND_POD_VALIDADO=$?

validar_servicio_en_pod "$DEPLOY_FRONTEND" $PUERTO_FRONTEND "Frontend"
FRONTEND_POD_VALIDADO=$?

# Validación de NodePort para backend y frontend
validar_servicio_nodeport "$DEPLOY_BACKEND" "$BACKEND_SERVICE_NAME" "Backend" "$PUERTO_FRONTEND"
BACKEND_SVC_VALIDADO=$?
validar_servicio_nodeport "$DEPLOY_FRONTEND" "$FRONTEND_SERVICE_NAME" "Frontend" "$PUERTO_FRONTEND"
FRONTEND_SVC_VALIDADO=$?

validar_conexion_servicios

validar_hpa_backend

enviar_resultados

